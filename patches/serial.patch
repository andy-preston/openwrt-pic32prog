diff --git serial.c serial.c
index 71544d1..09fd351 100644
--- ./serial.c
+++ ./serial.c
@@ -165,6 +165,9 @@ int serial_write(unsigned char *data, int len)
  */
 int serial_read(unsigned char *data, int len, int timeout_msec)
 {
+    int count;
+    unsigned char * p;
+
 #if defined(__WIN32__) || defined(WIN32)
     DWORD got;
     COMMTIMEOUTS ctmo;
@@ -185,42 +188,69 @@ int serial_read(unsigned char *data, int len, int timeout_msec)
         fprintf(stderr, "serial_read: read error\n");
         exit(-1);
     }
+    if (got == 0) {
+        if (debug_level > 1)
+            printf("serial_read: no characters to read\n");
+        return 0;
+    }
 #else
     struct timeval timeout, to2;
-    long got;
     fd_set rfds;
+    int recv;
+    size_t got;
 
     timeout.tv_sec = timeout_msec / 1000;
     timeout.tv_usec = timeout_msec % 1000 * 1000;
-again:
     to2 = timeout;
-    FD_ZERO(&rfds);
-    FD_SET(fd, &rfds);
-
-    got = select(fd + 1, &rfds, 0, 0, &to2);
-    if (got < 0) {
-        if (errno == EINTR || errno == EAGAIN) {
-            if (debug_level > 1)
-                printf("serial_read: retry on select\n");
-            goto again;
+    p = data;
+    got = 0;
+    while (got < len) {
+reselect:
+        FD_ZERO(&rfds);
+        FD_SET(fd, &rfds);
+        count = select(fd + 1, &rfds, NULL, NULL, &to2);
+        if (count == 0) {
+            if (debug_level > 1) {
+                printf("serial_read: programmer not responding\n");
+            }
+            return -1;
+        } else if (count == -1) {
+            if (errno == EINTR || errno == EAGAIN) {
+                if (debug_level > 1) {
+                    printf("serial_read: retry on select\n");
+                }
+                goto reselect;
+            } else {
+                fprintf(stderr, "serial_read: select error: %s\n", strerror(errno));
+                exit(-1);
+            }
         }
-        fprintf(stderr, "serial_read: select error: %s\n", strerror(errno));
-        exit(-1);
+        recv = read(fd, p, (len - got > 1024) ? 1024 : len - got);
+        if (recv < 0) {
+            fprintf(stderr, "serial_read: select error: %s\n", strerror(errno));
+            exit(-1);
+        }
+        p += recv;
+        got += recv;
     }
 #endif
-    if (got == 0) {
-        if (debug_level > 1)
-            printf("serial_read: no characters to read\n");
-        return 0;
-    }
-
-#if ! defined(__WIN32__) && ! defined(WIN32)
-    got = read(fd, data, (len > 1024) ? 1024 : len);
-    if (got < 0) {
-        fprintf(stderr, "serial_read: read error\n");
-        exit(-1);
+    if (debug_level > 1) {
+        printf("serial_read: recv:\n");
+        p = data;
+        count = got;
+        while (count) {
+            unsigned char c = *p;
+            if (isprint(c)) {
+                printf("%c ", c);
+            } else {
+                printf(". ");
+            }
+            printf ("[%02x] ", c);
+            p++;
+            count--;
+        }
+        printf("\n");
     }
-#endif
     return got;
 }
 
